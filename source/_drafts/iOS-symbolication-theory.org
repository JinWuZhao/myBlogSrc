#+TITLE: iOS符号化崩溃栈方案探索
#+TAGS: iOS-Dev
#+LAYOUT: draft
#+OPTIONS: toc:nil
* crash信息收集与分析
最近工作中涉及到应用崩溃信息收集的问题。之前使用友盟来做收集工作，后来觉得友盟报上来的信息实在有限，满足不了我们需求，于是我们改用了PLCrashReporter这个开源工具。我们定制的收集方式是每次应用启动监测设备上是否有应用的崩溃记录，如果有就直接将相关信息输出到日志中，这也是PLCrashReporter通常的使用方式。写入崩溃日志后立刻将当日的日志文件上传至我们的服务器，日志收集服务器在备案的同时会给我们相关的开发人员发送邮件提醒，于是我们开发人员就根据这个邮件附带的日志来定位问题。

PLCrashReporter的日志格式和苹果设备自己生成崩溃日式格式大体相同，可以用Xcode自带的symbolicatecrash工具来符号化，用起来还算方便。但是比较让人挠头的是这个工具不太稳定，经常性的由于找不到相关符号文件而导致部分崩溃栈无法符号化，最崩溃的是，iOS9产生的符号化文件中由于存在部分重复信息导致符号化工具直接卡死，为解决这问题我还要写工具去过滤日志信息。经过了一段时间之后我们实在无法忍受这种体验了，符号化失败只能手动用atos来找符号信息，实在浪费时间，于是我决定自己去实现一个。本文会讲述我研究与实现的整个过程。

* 符号化crash文件
手动符号化之前我们需要先了解下crash文件的格式。下面是一段PLCrashReporter上传的崩溃日志：
#+BEGIN_SRC python
"""
Hardware Model:      iPhone7,2
Process:         YouDu [1672]
Path:            /var/mobile/Containers/Bundle/Application/C957DEC3-3D47-463F-8217-38998BFDB2A4/YouDu.app/YouDu
Identifier:      im.xinda.youdu
Version:         11040
Code Type:       ARM-64
Parent Process:  ??? [1]

Date/Time:       2015-12-28 04:09:24 +0000
OS Version:      iPhone OS 9.2 (13C75)
Report Version:  104

Exception Type:  SIGSEGV
Exception Codes: SEGV_ACCERR at 0x68
Crashed Thread:  0

Thread 0 Crashed:
0   libsystem_platform.dylib            0x00000001827262a0 0x182724000 + 8864
1   YouDu                               0x0000000100353254 0x100054000 + 3142228
2   YouDu                               0x000000010034f3b0 0x100054000 + 3126192
3   YouDu                               0x00000001003b4580 0x100054000 + 3540352
4   YouDu                               0x00000001003b5bd8 0x100054000 + 3546072
5   YouDu                               0x00000001003b23fc 0x100054000 + 3531772
6   YouDu                               0x00000001001e10b0 0x100054000 + 1626288
7   YouDu                               0x00000001001df9c4 0x100054000 + 1620420
8   YouDu                               0x00000001001d4ef8 0x100054000 + 1576696
9   YouDu                               0x00000001001d0e60 0x100054000 + 1560160
10  YouDu                               0x00000001001cf814 0x100054000 + 1554452
11  YouDu                               0x00000001001d84e8 0x100054000 + 1590504
12  YouDu                               0x00000001001c5be4 0x100054000 + 1514468
13  libdispatch.dylib                   0x0000000182519630 0x182518000 + 5680
14  libdispatch.dylib                   0x00000001825195f0 0x182518000 + 5616
15  libdispatch.dylib                   0x000000018251ecf8 0x182518000 + 27896
16  CoreFoundation                      0x0000000182a7cbb0 0x1829a0000 + 904112
17  CoreFoundation                      0x0000000182a7aa18 0x1829a0000 + 895512
18  CoreFoundation                      0x00000001829a9680 0x1829a0000 + 38528
19  GraphicsServices                    0x0000000183eb8088 0x183eac000 + 49288
20  UIKit                               0x0000000187820d90 0x1877a4000 + 511376
21  YouDu                               0x000000010010d11c 0x100054000 + 758044
22  ???                                 0x000000018254a8b8 0x0 + 0
...

Binary Images:
    0x100054000 -        0x1004dffff +YouDu arm64  <a06aad691a153eef8fbc3d83459f5649> /var/mobile/Containers/Bundle/Application/C957DEC3-3D47-463F-8217-38998BFDB2A4/YouDu.app/YouDu
    0x1820b4000 -        0x1820b5fff  libSystem.B.dylib arm64  <c4cd04b37e5f34698856a9384aefff40> /usr/lib/libSystem.B.dylib
    0x1820b8000 -        0x18210bfff  libc++.1.dylib arm64  <d430d0ad16893b76bbc52468f65d5906> /usr/lib/libc++.1.dylib
    0x18210c000 -        0x18212bfff  libc++abi.dylib arm64  <1c0a8ef87e8c37b2a577dc1a44e2b16e> /usr/lib/libc++abi.dylib
    0x18212c000 -        0x182498fff  libobjc.A.dylib arm64  <da8e482b3e7d3c40a798a0c86a3d6890> /usr/lib/libobjc.A.dylib
    0x18249c000 -        0x1824a0fff  libcache.dylib arm64  <242f50f854a1301fa6f76b4531101238> /usr/lib/system/libcache.dylib
    0x1824a4000 -        0x1824affff  libcommonCrypto.dylib arm64  <f995fe44b0483f699bf9cfb570726bb3> /usr/lib/system/libcommonCrypto.dylib
...
"""
#+END_SRC
